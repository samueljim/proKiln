!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="mean",service={applicationEnvironment:window.env,applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ngFileUpload","ui-notification"],registerModule:registerModule};window.ApplicationConfiguration=service,angular.module("ui-notification").config(["NotificationProvider",function(NotificationProvider){NotificationProvider.setOptions({delay:2e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"bottom"})}])}(window);
!function(app){"use strict";function bootstrapConfig($compileProvider,$locationProvider,$httpProvider,$logProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1}).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor"),$compileProvider.debugInfoEnabled("production"!==app.applicationEnvironment),$logProvider.debugEnabled("production"!==app.applicationEnvironment)}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$compileProvider","$locationProvider","$httpProvider","$logProvider"],angular.element(document).ready(init)}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("articles",["core"]),app.registerModule("articles.admin",["core.admin"]),app.registerModule("articles.admin.routes",["core.admin.routes"]),app.registerModule("articles.services"),app.registerModule("articles.routes",["ui.router","core.routes","articles.services"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("chat",["core"]),app.registerModule("chat.routes",["ui.router","core.routes"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("core"),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration);
!function(){"use strict";function ArticlesController($scope,article,Authentication){var vm=this;vm.article=article,vm.authentication=Authentication}angular.module("articles").controller("ArticlesController",ArticlesController),ArticlesController.$inject=["$scope","articleResolve","Authentication"]}();
!function(){"use strict";function ArticlesListController(ArticlesService){this.articles=ArticlesService.query()}angular.module("articles").controller("ArticlesListController",ArticlesListController),ArticlesListController.$inject=["ArticlesService"]}();
!function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Articles",state:"admin.articles.list"})}angular.module("articles.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.articles",{abstract:!0,url:"/articles",template:"<ui-view/>"}).state("admin.articles.list",{url:"",templateUrl:"/modules/articles/client/views/admin/list-articles.client.view.html",controller:"ArticlesAdminListController",controllerAs:"vm",data:{roles:["admin"]}}).state("admin.articles.create",{url:"/create",templateUrl:"/modules/articles/client/views/admin/form-article.client.view.html",controller:"ArticlesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{articleResolve:newArticle}}).state("admin.articles.edit",{url:"/:articleId/edit",templateUrl:"/modules/articles/client/views/admin/form-article.client.view.html",controller:"ArticlesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{articleResolve:getArticle}})}function getArticle($stateParams,ArticlesService){return ArticlesService.get({articleId:$stateParams.articleId}).$promise}function newArticle(ArticlesService){return new ArticlesService}angular.module("articles.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArticle.$inject=["$stateParams","ArticlesService"],newArticle.$inject=["ArticlesService"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Articles",state:"articles",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","articles",{title:"List Articles",state:"articles.list",roles:["*"]})}angular.module("articles").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("articles",{abstract:!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"/modules/articles/client/views/list-articles.client.view.html",controller:"ArticlesListController",controllerAs:"vm",data:{pageTitle:"Articles List"}}).state("articles.view",{url:"/:articleId",templateUrl:"/modules/articles/client/views/view-article.client.view.html",controller:"ArticlesController",controllerAs:"vm",resolve:{articleResolve:getArticle},data:{pageTitle:"Article {{ articleResolve.title }}"}})}function getArticle($stateParams,ArticlesService){return ArticlesService.get({articleId:$stateParams.articleId}).$promise}angular.module("articles.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArticle.$inject=["$stateParams","ArticlesService"]}();
!function(){"use strict";function ArticlesService($resource,$log){function createOrUpdate(article){function onSuccess(article){}function onError(errorResponse){handleError(errorResponse.data)}return article._id?article.$update(onSuccess,onError):article.$save(onSuccess,onError)}function handleError(error){$log.error(error)}var Article=$resource("/api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}});return angular.extend(Article.prototype,{createOrUpdate:function(){return createOrUpdate(this)}}),Article}angular.module("articles.services").factory("ArticlesService",ArticlesService),ArticlesService.$inject=["$resource","$log"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Chat",state:"chat"})}angular.module("chat").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"/modules/chat/client/views/chat.client.view.html",controller:"ChatController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Chat"}})}angular.module("chat.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function ChatController($scope,$state,Authentication,Socket){function sendMessage(){var message={text:vm.messageText};Socket.emit("chatMessage",message),vm.messageText=""}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,function(){Authentication.user||$state.go("home"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){vm.messages.unshift(message)}),$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}()}angular.module("chat").controller("ChatController",ChatController),ChatController.$inject=["$scope","$state","Authentication","Socket"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}angular.module("core.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenu("account",{roles:["user"]}),menuService.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),menuService.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),menuService.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"})}angular.module("core").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeFilter($rootScope,$state,Authentication){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(roles[i])){allowed=!0;break}allowed||(event.preventDefault(),null!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication"]}();
!function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path();if(path.length>1&&"/"===path[path.length-1]){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"/modules/core/client/views/home.client.view.html",controller:"HomeController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"/modules/core/client/views/404.client.view.html",controller:"ErrorController",controllerAs:"vm",params:{message:["$stateParams",function($stateParams){return $stateParams.message}]},data:{ignoreState:!0,pageTitle:"Not Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"/modules/core/client/views/400.client.view.html",controller:"ErrorController",controllerAs:"vm",params:{message:["$stateParams",function($stateParams){return $stateParams.message}]},data:{ignoreState:!0,pageTitle:"Bad Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"/modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}})}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function ErrorController($stateParams){var vm=this;vm.errorMessage=null,$stateParams.message&&(vm.errorMessage=$stateParams.message)}angular.module("core").controller("ErrorController",ErrorController),ErrorController.$inject=["$stateParams"]}();
!function(){"use strict";function HeaderController($scope,$state,Authentication,menuService){function stateChangeSuccess(){vm.isCollapsed=!1}var vm=this;vm.accountMenu=menuService.getMenu("account").items[0],vm.authentication=Authentication,vm.isCollapsed=!1,vm.menu=menuService.getMenu("topbar"),$scope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","Authentication","menuService"]}();
!function(){"use strict";function HomeController(){}angular.module("core").controller("HomeController",HomeController)}();
!function(){"use strict";function autofocus($timeout,$window){function link(scope,element,attrs){$window.innerWidth>=800&&$timeout(function(){var el=element[0];el.focus(),el.selectionStart=el.selectionEnd=el.value.length},100)}return{restrict:"A",link:link}}angular.module("core").directive("autofocus",autofocus),autofocus.$inject=["$timeout","$window"]}();
!function(){"use strict";function pageTitle($rootScope,$interpolate,$state){function link(scope,element){function listener(event,toState){if(toState.data&&toState.data.pageTitle){var stateTitle=$interpolate(toState.data.pageTitle)($state.$current.locals.globals);element.html("MEAN.js - "+stateTitle)}else element.html("MEAN.js")}$rootScope.$on("$stateChangeSuccess",listener)}return{restrict:"A",link:link}}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$interpolate","$state"]}();
!function(){"use strict";function showErrors($timeout,$interpolate){function compile(elem,attrs){function linkFn(scope,el,attrs,formCtrl){function checkValidity(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}function reset(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)}function toggleClasses(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}var inputEl,inputName,inputNgEl,options,showSuccess,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),!(inputName=$interpolate(inputNgEl.attr("name")||"")(scope)))throw new Error("show-errors element has no child input elements with a 'name' attribute class");scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},toggleClasses),scope.$on("show-errors-check-validity",checkValidity),scope.$on("show-errors-reset",reset)}if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}return{restrict:"A",require:"^form",compile:compile}}angular.module("core").directive("showErrors",showErrors),showErrors.$inject=["$timeout","$interpolate"]}();
!function(){"use strict";function menuService(){function addMenu(menuId,options){return options=options||{},service.menus[menuId]={roles:options.roles||service.defaultRoles,items:options.items||[],shouldRender:shouldRender},service.menus[menuId]}function addMenuItem(menuId,options){if(options=options||{},service.validateMenuExistence(menuId),service.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||void 0===options.roles?service.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&service.addSubMenuItem(menuId,options.state,options.items[i]);return service.menus[menuId]}function addSubMenuItem(menuId,parentItemState,options){options=options||{},service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items[itemIndex].state===parentItemState&&service.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",params:options.params||{},roles:null===options.roles||void 0===options.roles?service.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return service.menus[menuId]}function getMenu(menuId){return service.validateMenuExistence(menuId),service.menus[menuId]}function removeMenu(menuId){service.validateMenuExistence(menuId),delete service.menus[menuId]}function removeMenuItem(menuId,menuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items.hasOwnProperty(itemIndex)&&service.menus[menuId].items[itemIndex].state===menuItemState&&service.menus[menuId].items.splice(itemIndex,1);return service.menus[menuId]}function removeSubMenuItem(menuId,submenuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in service.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&service.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&service.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return service.menus[menuId]}function validateMenuExistence(menuId){if(menuId&&menuId.length){if(service.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")}var shouldRender,service={addMenu:addMenu,addMenuItem:addMenuItem,addSubMenuItem:addSubMenuItem,defaultRoles:["user","admin"],getMenu:getMenu,menus:{},removeMenu:removeMenu,removeMenuItem:removeMenuItem,removeSubMenuItem:removeSubMenuItem,validateMenuExistence:validateMenuExistence};return function(){shouldRender=function(user){if(-1!==this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},addMenu("topbar",{roles:["*"]})}(),service}angular.module("core").factory("menuService",menuService)}();
!function(){"use strict";function Socket(Authentication,$state,$timeout){function connect(){Authentication.user&&(service.socket=io())}function emit(eventName,data){service.socket&&service.socket.emit(eventName,data)}function on(eventName,callback){service.socket&&service.socket.on(eventName,function(data){$timeout(function(){callback(data)})})}function removeListener(eventName){service.socket&&service.socket.removeListener(eventName)}var service={connect:connect,emit:emit,on:on,removeListener:removeListener,socket:null};return connect(),service}angular.module("core").factory("Socket",Socket),Socket.$inject=["Authentication","$state","$timeout"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"/modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"/modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"/modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"/modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"/modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"/modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.picture",{url:"/picture",templateUrl:"/modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"/modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",templateUrl:"/modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"/modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"/modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"/modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"/modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"/modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}();
!function(){"use strict";function AuthenticationController($scope,$state,UsersService,$location,$window,Authentication,PasswordValidator,Notification){function signup(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;UsersService.userSignup(vm.credentials).then(onUserSignupSuccess).catch(onUserSignupError)}function signin(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;UsersService.userSignin(vm.credentials).then(onUserSigninSuccess).catch(onUserSigninError)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}function onUserSignupSuccess(response){vm.authentication.user=response,Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Signup successful!'}),$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSignupError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signup Error!',delay:6e3})}function onUserSigninSuccess(response){vm.authentication.user=response,Notification.info({message:"Welcome "+response.firstName}),$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSigninError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Signin Error!',delay:6e3})}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.usernameRegex=/^(?=[\w.-]+$)(?!.*[._-]{2})(?!\.)(?!.*\.$).{3,34}$/,$location.search().err&&Notification.error({message:$location.search().err}),vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","UsersService","$location","$window","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function PasswordController($scope,$stateParams,UsersService,$location,Authentication,PasswordValidator,Notification){function askForPasswordReset(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1;UsersService.requestPasswordReset(vm.credentials).then(onRequestPasswordResetSuccess).catch(onRequestPasswordResetError)}function resetUserPassword(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1;UsersService.resetPassword($stateParams.token,vm.passwordDetails).then(onResetPasswordSuccess).catch(onResetPasswordError)}function onRequestPasswordResetSuccess(response){vm.credentials=null,Notification.success({message:response.message,title:'<i class="glyphicon glyphicon-ok"></i> Password reset email sent successfully!'})}function onRequestPasswordResetError(response){vm.credentials=null,Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Failed to send password reset email!',delay:4e3})}function onResetPasswordSuccess(response){vm.passwordDetails=null,Authentication.user=response,Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Password reset successful!'}),$location.path("/password/reset/success")}function onResetPasswordError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Password reset failed!',delay:4e3})}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","UsersService","$location","Authentication","PasswordValidator","Notification"]}();
!function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}return{require:"ngModel",link:link}}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}();
!function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){return scope.passwordVerify===password})})}return{require:"ngModel",scope:{passwordVerify:"="},link:link}}angular.module("users").directive("passwordVerify",passwordVerify)}();
!function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}return{require:"ngModel",link:link}}angular.module("users").directive("lowercase",lowercase)}();
!function(){"use strict";function Authentication($window){return{user:$window.user}}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}();
!function(){"use strict";function PasswordValidator($window){function getResult(password){return owaspPasswordStrengthTest.test(password)}function getPopoverMsg(){return"Please enter a passphrase or password with "+owaspPasswordStrengthTest.configs.minLength+" or more characters, numbers, lowercase, uppercase, and special characters."}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:getResult,getPopoverMsg:getPopoverMsg}}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}();
!function(){"use strict";function UsersService($resource){var Users=$resource("/api/users",{},{update:{method:"PUT"},updatePassword:{method:"POST",url:"/api/users/password"},deleteProvider:{method:"DELETE",url:"/api/users/accounts",params:{provider:"@provider"}},sendPasswordResetToken:{method:"POST",url:"/api/auth/forgot"},resetPasswordWithToken:{method:"POST",url:"/api/auth/reset/:token"},signup:{method:"POST",url:"/api/auth/signup"},signin:{method:"POST",url:"/api/auth/signin"}});return angular.extend(Users,{changePassword:function(passwordDetails){return this.updatePassword(passwordDetails).$promise},removeSocialAccount:function(provider){return this.deleteProvider({provider:provider}).$promise},requestPasswordReset:function(credentials){return this.sendPasswordResetToken(credentials).$promise},resetPassword:function(token,passwordDetails){return this.resetPasswordWithToken({token:token},passwordDetails).$promise},userSignup:function(credentials){return this.signup(credentials).$promise},userSignin:function(credentials){return this.signin(credentials).$promise}}),Users}function AdminService($resource){return $resource("/api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}();
!function(){"use strict";function ArticlesAdminController($scope,$state,$window,article,Authentication,Notification){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.article.$remove(function(){$state.go("admin.articles.list"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Article deleted successfully!'})})}function save(isValid){function successCallback(res){$state.go("admin.articles.list"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Article saved successfully!'})}function errorCallback(res){Notification.error({message:res.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Article save error!'})}if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.form.articleForm"),!1;vm.article.createOrUpdate().then(successCallback).catch(errorCallback)}var vm=this;vm.article=article,vm.authentication=Authentication,vm.form={},vm.remove=remove,vm.save=save}angular.module("articles.admin").controller("ArticlesAdminController",ArticlesAdminController),ArticlesAdminController.$inject=["$scope","$state","$window","articleResolve","Authentication","Notification"]}();
!function(){"use strict";function ArticlesAdminListController(ArticlesService){this.articles=ArticlesService.query()}angular.module("articles.admin").controller("ArticlesAdminListController",ArticlesAdminListController),ArticlesAdminListController.$inject=["ArticlesService"]}();
!function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 400:$injector.get("$state").go("bad-request",{message:rejection.data.message});break;case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden");break;case 404:$injector.get("$state").go("not-found",{message:rejection.data.message});break;case-1:$injector.get("Notification").error({message:"No response received from server. Please try again later.",title:"Error processing request!",delay:5e3})}return $q.reject(rejection)}return{responseError:responseError}}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}();
!function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}();
!function(){"use strict";function UserController($scope,$state,$window,Authentication,user,Notification){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1),Notification.success("User deleted successfully!")):vm.user.$remove(function(){$state.go("admin.users"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User deleted successfully!'})}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id}),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> User saved successfully!'})},function(errorResponse){Notification.error({message:errorResponse.data.message,title:'<i class="glyphicon glyphicon-remove"></i> User update error!'})})}function isContextUserSelf(){return vm.user.username===vm.authentication.user.username}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update,vm.isContextUserSelf=isContextUserSelf}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve","Notification"]}();
!function(){"use strict";function ChangePasswordController($scope,$http,Authentication,UsersService,PasswordValidator,Notification){function changeUserPassword(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1;UsersService.changePassword(vm.passwordDetails).then(onChangePasswordSuccess).catch(onChangePasswordError)}function onChangePasswordSuccess(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Password Changed Successfully'}),vm.passwordDetails=null}function onChangePasswordError(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Password change failed!'})}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","UsersService","PasswordValidator","Notification"]}();
!function(){"use strict";function ChangeProfilePictureController($timeout,Authentication,Upload,Notification){function onSuccessItem(response){Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Successfully changed profile picture'}),vm.user=Authentication.user=response,vm.fileSelected=!1,vm.progress=0}function onErrorItem(response){vm.fileSelected=!1,vm.progress=0,Notification.error({message:response.message,title:'<i class="glyphicon glyphicon-remove"></i> Failed to change profile picture'})}var vm=this;vm.user=Authentication.user,vm.progress=0,vm.upload=function(dataUrl){Upload.upload({url:"/api/users/picture",data:{newProfilePicture:dataUrl}}).then(function(response){$timeout(function(){onSuccessItem(response.data)})},function(response){response.status>0&&onErrorItem(response.data)},function(evt){vm.progress=parseInt(100*evt.loaded/evt.total,10)})}}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$timeout","Authentication","Upload","Notification"]}();
!function(){"use strict";function EditProfileController($scope,$http,$location,UsersService,Authentication,Notification){function updateUserProfile(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;new UsersService(vm.user).$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),Notification.success({message:'<i class="glyphicon glyphicon-ok"></i> Edit profile successful!'}),Authentication.user=response},function(response){Notification.error({message:response.data.message,title:'<i class="glyphicon glyphicon-remove"></i> Edit profile failed!'})})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication","Notification"]}();
!function(){"use strict";function SettingsController($scope,Authentication){this.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}();