{
  "_args": [
    [
      {
        "raw": "gulp-csslint@~1.0.0",
        "scope": null,
        "escapedName": "gulp-csslint",
        "name": "gulp-csslint",
        "rawSpec": "~1.0.0",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "C:\\Users\\thesa\\Documents\\kilncontroller\\proKilnWeb"
    ]
  ],
  "_from": "gulp-csslint@>=1.0.0 <1.1.0",
  "_id": "gulp-csslint@1.0.0",
  "_inCache": true,
  "_location": "/gulp-csslint",
  "_nodeVersion": "5.11.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/gulp-csslint-1.0.0.tgz_1471724696271_0.5921891615726054"
  },
  "_npmUser": {
    "name": "lazd",
    "email": "lazdnet@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-csslint@~1.0.0",
    "scope": null,
    "escapedName": "gulp-csslint",
    "name": "gulp-csslint",
    "rawSpec": "~1.0.0",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-csslint/-/gulp-csslint-1.0.0.tgz",
  "_shasum": "d95a56f7719466147fa9a07302fdba1690391523",
  "_shrinkwrap": null,
  "_spec": "gulp-csslint@~1.0.0",
  "_where": "C:\\Users\\thesa\\Documents\\kilncontroller\\proKilnWeb",
  "author": {
    "name": "Larry Davis",
    "email": "lazdnet@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/lazd/gulp-csslint/issues"
  },
  "dependencies": {
    "csslint": "^1.0.2",
    "gulp-util": "^3.0.7",
    "rcloader": "^0.2.1",
    "through2": "^2.0.1"
  },
  "description": "CSSLint plugin for gulp",
  "devDependencies": {
    "coveralls": "^2.11.12",
    "csslint-stylish": "0.0.4",
    "eslint": "^3.2.2",
    "eslint-config-semistandard": "^7.0.0-beta.0",
    "eslint-config-standard": "^6.0.0-beta.2",
    "eslint-plugin-promise": "^2.0.1",
    "eslint-plugin-standard": "^2.0.0",
    "mocha": "^3.0.2",
    "node-version-check": "^2.1.0",
    "nyc": "^7.1.0",
    "rimraf": "^2.5.4",
    "should": "^11.0.0",
    "sinon": "^1.17.5"
  },
  "directories": {},
  "dist": {
    "shasum": "d95a56f7719466147fa9a07302fdba1690391523",
    "tarball": "https://registry.npmjs.org/gulp-csslint/-/gulp-csslint-1.0.0.tgz"
  },
  "engines": {
    "node": ">=0.10"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "371a4ce3825be7cc92e0f2dc789afe48bcfce091",
  "homepage": "https://github.com/lazd/gulp-csslint#readme",
  "keywords": [
    "csslint",
    "gulpplugin"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "lazd",
      "email": "lazdnet@gmail.com"
    }
  ],
  "name": "gulp-csslint",
  "optionalDependencies": {},
  "readme": "# gulp-csslint [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url] [![Dependency status][david-image]][david-url]\n> CSSLint plugin for gulp 3\n\n## Usage\n\nFirst, install `gulp-csslint` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-csslint\n```\n\nThen, add it to your `gulpfile.js`:\n\n```js\nvar csslint = require('gulp-csslint');\n\ngulp.task('css', function() {\n  gulp.src('client/css/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter());\n});\n```\n\n## API\n\n### csslint(ruleConfiguration)\n\n#### ruleConfiguration\nType: `Object`\n\nIf you pass `lookup: false`, the local .csslintrc is not looked up automatically.\n\nYou can pass rule configuration as an object. See the [list of rules by ID on the CSSLint wiki](https://github.com/stubbornella/csslint/wiki/Rules-by-ID) for valid rule IDs.\n\nAny properties passed will be in _addition_ to (or overwriting) the ones in .csslintrc (unless `lookup: false` is passed).\n\n```js\ngulp.src('client/css/*.css')\n  .pipe(csslint({\n    'shorthand': false\n  }))\n  .pipe(csslint.formatter());\n```\n\n### csslint(csslintrc)\n\n#### csslintrc\nType: `String`\n\nYou can also pass the path to your csslintrc file instead of a rule configuration object.\n\n```js\ngulp.src('client/css/*.css')\n  .pipe(csslint('csslintrc.json'))\n  .pipe(csslint.formatter());\n```\n\n## Results\n\nAdds the following properties to the file object:\n\n```js\nfile.csslint.success = true; // or false\nfile.csslint.report = {}; // The report from CSSLint after linting the file\n```\n\n## Using formatters\n\nSeveral formatters come built-in to CSSLint. To use one of these formatters, pass the name to `csslint.formatter`.\n\nFor a list of all formatters supported by `csslint`, see the [csslint wiki](https://github.com/CSSLint/csslint/wiki/Command-line-interface#--format).\n\n```js\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter('junit-xml'));\n```\n\n### Custom formatters\n\nCustom formatters can be provided by first adding a valid CSSLint-formatter, such as `csslint-stylish`, then using it:\n\n```js\nvar csslint = require('gulp-csslint');\n\ncsslint.addFormatter('csslint-stylish');\n\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter('stylish'))\n});\n```\n\nYou can provide the formatter by requiring it directly as well:\n\n```js\nvar csslint = require('gulp-csslint');\n\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter(require('csslint-stylish')))\n});\n```\n\nYou can also provide an object with the following contract to implement your own formatter:\n\n```js\n{\n  id: 'string', // Name passed to csslint.formatter\n  startFormat: function() {}, // Called before parsing any files, should return a string\n  startFormat: function() {}, // Called after parsing all files, should return a string\n  formatResult: function (results, filename, options) {} // Called with a results-object per file linted. Optionally called with a filename, and options passed to csslint.formatter(*formatter*, *options*)\n}\n```\n\nYou can also provide a function, which is called for each file linted with the same arguments as `formatResults`.\n\n### Formatter options\nYou can also pass options to the built-in formatter, by passing a second option to `formatter`.\n\n```js\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter('junit-xml', options));\n});\n```\n\nSee the documentation for the formatters regarding what options they support.\n\nThis plugin supports one option outside of that, called `logger`, allowing you to specify how to log out the report.\nDefault is using `process.stdout.write`, but you can use e.g. `console.log`, or `gutil.log`.\n\n```js\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter('junit-xml', {logger: console.log.bind(console)}));\n});\n```\n\n```js\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter('junit-xml', {logger: gutil.log.bind(null, 'gulp-csslint:')}));\n});\n```\n\n`logger` is called once for the starting format of the formatter, then once for each file containing violations, then\nlastly once for the ending format. Instead of writing to `stdout`, you can write to file using this option.\n\n```js\ngulp.task('lint', function(cb) {\n  var fs = require('fs');\n  var output = '';\n\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter('junit-xml', {logger: function(str) { output += str; }}))\n    .on('end', function(err) {\n      if (err) return cb(err);\n\n      fs.writeFile('some/path/junit.xml', output, cb);\n    });\n});\n```\n\nThis functionality is only available when not using a custom formatting function.\n\n## Custom rules\n\nUse the `csslint.addRule(rule)` method to define custom rules that run in addition to the rules defined in the csslintrc file. See [Working with Rules](https://github.com/CSSLint/csslint/wiki/Working-with-Rules) for details.\n\n```js\nvar csslint = require('gulp-csslint');\n\ncsslint.addRule({\n  // rule information\n});\n\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter())\n});\n```\n\n## Fail on errors\n\nPipe the file stream to `csslint.failFormatter()` to fail on errors.\n\n```js\nvar csslint = require('gulp-csslint');\n\ngulp.task('lint', function() {\n  gulp.src('lib/*.css')\n    .pipe(csslint())\n    .pipe(csslint.formatter()) // Display errors\n    .pipe(csslint.formatter('fail')); // Fail on error (or csslint.failFormatter())\n});\n```\n\n\n[travis-url]: http://travis-ci.org/lazd/gulp-csslint\n[travis-image]: https://img.shields.io/travis/lazd/gulp-csslint.svg\n[npm-url]: https://npmjs.org/package/gulp-csslint\n[npm-image]: https://img.shields.io/npm/v/gulp-csslint.svg\n[david-url]: https://david-dm.org/lazd/gulp-csslint\n[david-image]: https://img.shields.io/david/lazd/gulp-csslint.svg\n[coveralls-url]: https://coveralls.io/r/lazd/gulp-csslint\n[coveralls-image]: https://img.shields.io/coveralls/lazd/gulp-csslint.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/lazd/gulp-csslint.git"
  },
  "scripts": {
    "clean": "rimraf coverage/ .nyc_output/",
    "cover": "nyc mocha",
    "lint": "node-version-gte-4 && eslint index.js test/main.js || node-version-lt-4",
    "postcover": "nyc report --reporter lcov",
    "precover": "npm run lint && npm run clean",
    "pretest": "npm run lint",
    "test": "mocha"
  },
  "version": "1.0.0"
}
